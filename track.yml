slug: boundary-quick-local-demo
version: 0.0.2
title: Demo Boundary
teaser: Boundary Demo env (SSH, PSQL, Exec, RDP)
description: Test Boundary PKI Workers and various Target types - based upon Andrew
  Klass 
icon: https://registry.terraform.io/images/providers/boundary.svg
tags:
- Vault
- Boundary
owner: hashicorp
developers:
- aklaas@hashicorp.com
- sebastian.maniak@hashicorp.com
challenges:
- slug: 01-boundary-worker-setup
  type: challenge
  title: Configuration & Boundary (SSH, Postgres, Exec)
  teaser: Configure Vault to issue credentials for Boundary.
  notes:
  - type: text
    contents: Boundary provides a secure way to access hosts and critical systems
      without having to manage credentials or expose your network.
  assignment: |-
    NOTE: (username: vault, password: vault) for the Vault UI tab (userpass auth method)

    First, We need to create a Boundary cluster at https://portal.cloud.hashicorp.com/sign-in.

    After creation, copy the Boundary cluster address URL and switch back to the "Boundary Worker" Instruqt tab.

    ```
    export BOUNDARY_ADDR=
    ```
    Set the TF var as well (used later).
    ```
    export TF_VAR_boundary_addr=${BOUNDARY_ADDR}
    ```
    Set the admin user you created in the HCP portal.
    ```
    export ADMIN_USER=
    ```
    You will need to login to your Boundary cluster to get the initial auth method ID. (For now).
    
    Access the Boundary UI through the HCP portal (click into your Boundary Cluster from the HCP portal).
    It should say "Open Admin UI" as a blue button at the top right of the cluster's page in HCP.

    On the left hand side in your Boundary cluster Admin UI click the "Auth Methods" tab and copy the method id.
    Set the id.
    ```
    export TF_VAR_auth_method_id=
    ```
    Login to the cluster. Once logged in, a Boundary token will be returned.
    ```
    boundary authenticate password -auth-method-id=${TF_VAR_auth_method_id} -login-name=$ADMIN_USER
    ```
    Set the Boundary token.
    ```
    export BOUNDARY_TOKEN=
    ```
    Next we will configure our cluster with demo scopes, catalogs, hosts, targets, etc. using Terraform.
    ```
    cd terraform-boundary/
    vault login -method=userpass username=vault password=vault
    export BOUNDARY_VAULT_TOKEN=$(vault token create \
      -no-default-policy=true \
      -policy="vault_admin" \
      -orphan=true \
      -period=20m \
      -renewable=true \
      -format=json | jq -r .auth.client_token)
    export TF_VAR_vault_token=${BOUNDARY_VAULT_TOKEN}
    terraform init -upgrade
    terraform init
    ```
    Run terraform apply.
    ```
    terraform apply --auto-approve;
    ```

    Set env variables for our project and targets
    ```
    export PROJECT_ID=$(terraform output -raw PROJECT_ID)
    export POSTGRES_TARGET_ID=$(terraform output -raw POSTGRES_TARGET_ID)
    export SSH_BROKERED_TARGET_ID=$(terraform output -raw SSH_BROKERED_TARGET_ID)
    export SSH_INJECTED_TARGET_ID=$(terraform output -raw SSH_INJECTED_TARGET_ID)
    export VAULT_TARGET_ID=$(terraform output -raw VAULT_TARGET_ID)
    export WORKER_TOKEN=$(terraform output -raw WORKER_TOKEN)
    echo $PROJECT_ID
    echo $POSTGRES_TARGET_ID
    echo $SSH_BROKERED_TARGET_ID
    echo $SSH_INJECTED_TARGET_ID
    echo $VAULT_TARGET_ID
    ```
    The below command will output the worker_token from the Terraform output as well as the UUID of the cluster.
    ```
    echo $BOUNDARY_ADDR | awk -F/ '{print $3}' |  awk -F'.' '{print $1}'
    echo $WORKER_TOKEN
    ```
    Switch to the "Boundary Worker Editor" tab and add them in the code editor in place of the REPLACEME variables.
    (Click on the file on the left hand side to open it in the editor)

    Save the file and switch back to the "Boundary Worker" tab.

    Now, start the boundary-worker.

    ```
    systemctl restart boundary-worker
    ```

    You can use the following command to check that your PKI worker was registered. You will likely see 3 KMS workers (Default) and your self managed "PKI" worker.
    ```
    boundary workers list -token env://BOUNDARY_TOKEN
    ```

    You can also use the following to troubleshoot systemd
    ```
    journalctl -u boundary-worker
    ```

    Now let's setup the Vault integration. This has to be done manually for now until the terraform provider is updated.
    https://github.com/hashicorp/terraform-provider-boundary/issues/294


    ```
    export CRED_STORE_ID=$(boundary credential-stores create vault \
      -scope-id $PROJECT_ID \
      -vault-address "http://vault-sql-server:8200" \
      -vault-token $BOUNDARY_VAULT_TOKEN \
      -worker-filter='"vault" in "/tags/type"' \
      -format json \
      -token env://BOUNDARY_TOKEN | jq -r '.item.id')
    ```

    **POSTGRES DEMO**

    First, create the credential-library. This tells Boundary where to grab a cred from Vault.

    ```
    export CRED_LIB_ID=$(boundary credential-libraries create vault \
      -credential-store-id $CRED_STORE_ID \
      -vault-path "database/creds/vault_go_demo" \
      -name "vault-cred-library-postgres" \
      -format json \
      -token env://BOUNDARY_TOKEN | jq -r '.item.id')

    boundary targets add-credential-sources \
      -id $POSTGRES_TARGET_ID \
      -brokered-credential-source $CRED_LIB_ID \
      -token env://BOUNDARY_TOKEN
    ```
    Authorize a session (optional). This returns a brokered credential and connect to the target.
    ```
    boundary targets authorize-session -id  $POSTGRES_TARGET_ID -token env://BOUNDARY_TOKEN
    boundary connect postgres -target-id $POSTGRES_TARGET_ID --dbname vault_go_demo -token env://BOUNDARY_TOKEN
    ```

    **SSH INJECTED CREDS DEMO**

    Injected: No credential is returned to user. (i.e. Passwordless)

    ```
    export CRED_LIB_ID_SSH=$(boundary credential-libraries create vault \
      -credential-store-id $CRED_STORE_ID \
      -vault-path "secret/data/my-secret" \
      -name "vault-cred-library-ssh" \
      -credential-type ssh_private_key \
      -format json \
      -token env://BOUNDARY_TOKEN | jq -r '.item.id')

    boundary targets add-credential-sources \
      -id $SSH_INJECTED_TARGET_ID \
      -injected-application-credential-source $CRED_LIB_ID_SSH \
      -token env://BOUNDARY_TOKEN
    ```
    Connect to the target via the injected credential (The private key is not returned). You can use the Vault admin UI if you need to see the key.
    ```
    boundary targets authorize-session -id  $SSH_INJECTED_TARGET_ID -token env://BOUNDARY_TOKEN
    boundary connect ssh -target-id $SSH_INJECTED_TARGET_ID -token env://BOUNDARY_TOKEN
    ```

    **SSH STATIC CREDS (INTERNAL BOUNDARY CREDENTIAL STORE)**

    This will leverage Boundary's built-in credential store (configured via Terraform above).
    ```
    boundary targets authorize-session -id $SSH_BROKERED_TARGET_ID
    ```
    ```
    boundary connect ssh -target-id $SSH_BROKERED_TARGET_ID
    ```

    **VAULT ACCESS DEMO**

    Using Boundary exec to create a secure TCP connection to wrap the Vault binary.
    ```
    boundary connect -exec vault -target-id $VAULT_TARGET_ID -- secrets list
    ```

    Let's move on to the RDP/Windows demo.

    # windows Demo
      Switch to the "remote Desktop tab". This is connected to a front end windows servers and will simulate the client in our demo.

    Open a powershell. (click windows button bottom left, then search for powershell).

    Remember: Windows uses Ctrl-C not Cmd-C for copy.

    Install Boundary Cli and Boundary Desktop

    ```
    cd C:\Users\instruqt\Downloads\
    curl.exe --output boundary.zip --url https://releases.hashicorp.com/boundary-desktop/1.5.0/boundary-desktop_1.5.0_windows_amd64.zip


    cd C:\Users\instruqt\Downloads\
    curl.exe --output boundary_cli.zip --url https://releases.hashicorp.com/boundary/0.11.1/boundary_0.11.1_windows_amd64.zip

    Expand-Archive -PATH boundary.zip -DestinationPath boundary-desktop
    Expand-Archive -PATH boundary_cli.zip -DestinationPath boundary-cli
    ```
    Launch the Boundary Desktop App.
    ```
    C:\Users\instruqt\Downloads\boundary-desktop\Boundary\boundary-desktop_1.5.0_.exe
    ```
    If you use the boundary-desktop, login and create a connection to the target.

    You will need to input the boundary cluster URL. Login with your credentials and click the "connect" button for the windows_server target .

    Open a new powershell and connect. (replace the port with the output from the Boundary desktop above).

    ```
    mstsc /v:127.0.0.1:49814
    ```
    Login with the following credentials
    ```
    u: instruqt
    p: Passw0rd!
    ```

    **BOUNDARY CLI**

    If you want to use powershell and the Boundary CLI directly, set the following environment variables
    ```
    $Env:BOUNDARY_ADDR = ""
    ```
    ```
    $Env:ADMIN_USER = ""
    ```
    ```
    $Env:AUTH_METHOD = ""
    ```
    Next Login to boundary from powershell.
    ```
    C:\Users\instruqt\Downloads\boundary-cli\boundary.exe authenticate password -auth-method-id $Env:AUTH_METHOD -login-name $Env:ADMIN_USER
    ```
    Grab the ID of the target from the console (You could do this via command line as well).
    Grab this information from the corp_one scope in your Boundary Cluster admin UI. (accessible from HCP portal)
    The target is the "windows_server" target id under your corp_one scope -> targets section.
    ```
    $env:TARGET_ID = ""
    ```
    ```
    C:\Users\instruqt\Downloads\boundary-cli\boundary.exe connect rdp -target-id $Env:TARGET_ID
    ```
    Login with the following credentials
    ```
    u: instruqt
    p: Passw0rd!
    ```
    We could if optionally used Vault's LDAP/AD secret engine or K/V secret engine for brokering these credentials.
  tabs:
  - title: Boundary Worker
    type: terminal
    hostname: boundary-worker
  - title: Boundary Worker Editor
    type: code
    hostname: boundary-worker
    path: /etc/boundary.d/pki-worker.hcl
  - title: Terraform Editor
    type: code
    hostname: boundary-worker
    path: /root/terraform-boundary/main.tf
  - title: Vault UI
    type: service
    hostname: vault-sql-server
    port: 8200
  - title: Vault & SQL Server
    type: terminal
    hostname: vault-sql-server
  - title: Remote Desktop
    type: service
    hostname: guac
    path: /#/client/c/srv01?username=guac_user&password=guac_password
    port: 8080
  - title: Windows Server PS
    type: terminal
    hostname: windows-server
  - title: Windows Destination
    type: terminal
    hostname: windows-destination
  difficulty: basic
  timelimit: 172800
checksum: "12296055947934684430"
