#!/bin/bash
set -e
set -v

until [ -f /opt/instruqt/bootstrap/host-bootstrap-completed ]
do
    sleep 1
done
echo "source /usr/share/bash-completion/bash_completion" >> /root/.bashrc

VAULT_VERSION=1.12.0
TERRAFORM_VERSION=1.3.3
BOUNDARY_VERSION=0.11.2
BOUNDARY_WORKER_VERSION=0.11.2

# Install Vault
curl -fsSL -o /tmp/vault.zip "https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip"
unzip -o -d /usr/local/bin/ /tmp/vault.zip

# Install Terraform
curl -fsSL -o /tmp/terraform.zip "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
unzip -o -d /usr/local/bin/ /tmp/terraform.zip

# Install Boundary
curl -fsSL -o /tmp/boundary.zip "https://releases.hashicorp.com/boundary/${BOUNDARY_VERSION}/boundary_${BOUNDARY_VERSION}_linux_amd64.zip"
unzip -o -d /usr/local/bin/ /tmp/boundary.zip

# Install Boundary Worker
curl -fsSL -o /tmp/boundary-worker.zip "https://releases.hashicorp.com/boundary-worker/${BOUNDARY_WORKER_VERSION}+hcp/boundary-worker_${BOUNDARY_WORKER_VERSION}+hcp_linux_amd64.zip"
unzip -o -d /usr/local/bin/ /tmp/boundary-worker.zip

cd /tmp
git clone https://github.com/Andrew-Klaas/boundary-lab.git

# Copy additional files.
cp boundary-lab/assets/systemd-files/vault.service /etc/systemd/system/vault.service
cp boundary-lab/assets/systemd-files/boundary-controller.service /etc/systemd/system/boundary-controller.service
cp boundary-lab/assets/systemd-files/boundary-worker.service /etc/systemd/system/boundary-worker.service
cp boundary-lab/assets/systemd-files/boundary.service /etc/systemd/system/boundary.service

cp -r boundary-lab/assets/terraform-boundary /root/

mkdir /etc/vault.d
mkdir /etc/boundary.d
mkdir /tmp/vault
mkdir /tmp/boundary

systemctl daemon-reload
systemctl enable vault.service
systemctl enable boundary-controller.service
systemctl enable boundary-worker.service


####################################
# Configure PostgreSQL
####################################

sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
apt-get -y update
sudo apt-get -y install postgresql
systemctl start postgresql
sudo cat << EOF > /etc/postgresql/15/main/conf.d/postgresql.conf
listen_addresses '*'
EOF
sudo echo "
host    all             all              0.0.0.0/0                       md5
host    all             all              ::/0                            md5
" >> /etc/postgresql/15/main/pg_hba.conf
systemctl restart postgresql

sudo -u postgres psql << EOF
ALTER USER postgres PASSWORD 'password';
CREATE DATABASE vault_go_demo;
EOF


####################################
# Configure Vault Server
####################################
local_ipv4=$(hostname -I | awk '{print $1}')
cat << EOF > /etc/vault.d/vault.hcl
storage "file" {
  path = "/tmp/vault/data"
}
listener "tcp" {
  address     = "0.0.0.0:8200"
  tls_disable = 1
}
# service_registration "consul" {
#   address = "$HOST_IP_ADDR:8500"
# }
api_addr = "http://${local_ipv4}:8200"
cluster_addr = "https://${local_ipv4}:8201"
ui = true
EOF

systemctl start vault

sleep 5s

vault operator init -key-shares=1  -key-threshold=1 --format json >> init.txt
ROOT_TOKEN=$(cat init.txt | jq -r .root_token)
UNSEAL_KEY=$(cat init.txt | jq -r .unseal_keys_b64[0])

vault operator unseal $UNSEAL_KEY
vault login $ROOT_TOKEN

#Create admin user
echo '
path "*" {
    capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}' | vault policy write vault_admin -
vault auth enable userpass
vault write auth/userpass/users/vault password=vault policies=vault_admin

vault secrets enable -path secret -version=2 kv
vault secrets enable database

vault kv put secret/my-secret username=root private_key=@/root/.ssh/id_rsa
vault kv put secret/my-app-secret username=application-user password=application-password

vault write database/config/my-postgresql-database \
plugin_name=postgresql-database-plugin \
allowed_roles="my-role, vault_go_demo" \
connection_url="postgresql://{{username}}:{{password}}@127.0.0.1:5432/vault_go_demo?sslmode=disable" \
username="postgres" \
password="password"

vault write database/roles/vault_go_demo \
db_name=my-postgresql-database \
creation_statements="CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; \
ALTER USER \"{{name}}\" WITH SUPERUSER;" \
default_ttl="1h" \
max_ttl="24h"

vault read database/creds/vault_go_demo

echo "Vault install complete" >> /tmp/install.log


vault kv put secret/my-secret username=root private_key=@/root/.ssh/id_rsa

#create a user for static testing
# sudo useradd testuser
# cat << EOF > testpassword.txt
# testuser:testpassword
# EOF
# chpasswd < testpassword.txt

exit 0